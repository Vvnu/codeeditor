{"ast":null,"code":"import { io } from 'socket.io-client';\nimport config from './config.js';\nconst serverURL = config.serverURL;\nexport const socket = io(serverURL);\nexport const initSocket = async () => {\n  const options = {\n    'force new connection': true,\n    reconnectionAttempt: 'Infinity',\n    timeout: 10000,\n    transport: ['websocket']\n  };\n  return io(serverURL, options);\n};\n\n// Debounce function to limit the rate of sending messages\nconst debounce = (func, wait) => {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n};\n\n// Function to send keystroke data\nconst sendKeystroke = data => {\n  socket.emit('send', data);\n};\n\n// Debounced send function\nconst debouncedSendKeystroke = debounce(sendKeystroke, 30000); // Adjust the delay as needed\n\n// Example usage: Call debouncedSendKeystroke instead of socket.emit directly\ndocument.addEventListener('keydown', event => {\n  const data = {\n    key: event.key,\n    roomId: 'room1'\n  }; // Example data structure\n  debouncedSendKeystroke(data);\n});","map":{"version":3,"names":["io","config","serverURL","socket","initSocket","options","reconnectionAttempt","timeout","transport","debounce","func","wait","args","clearTimeout","setTimeout","apply","sendKeystroke","data","emit","debouncedSendKeystroke","document","addEventListener","event","key","roomId"],"sources":["C:/Users/thaku/Desktop/MC/realtime-editor/src/socket.js"],"sourcesContent":["import { io } from 'socket.io-client';\nimport config from './config.js';\n\nconst serverURL = config.serverURL;\nexport const socket = io(serverURL);\n\nexport const initSocket = async () => {\n    const options = {\n        'force new connection': true,\n        reconnectionAttempt: 'Infinity',\n        timeout: 10000,\n        transport: ['websocket'],\n    };\n    return io(serverURL, options);\n};\n\n// Debounce function to limit the rate of sending messages\nconst debounce = (func, wait) => {\n    let timeout;\n    return (...args) => {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => func.apply(this, args), wait);\n    };\n};\n\n// Function to send keystroke data\nconst sendKeystroke = (data) => {\n    socket.emit('send', data);\n};\n\n// Debounced send function\nconst debouncedSendKeystroke = debounce(sendKeystroke, 30000); // Adjust the delay as needed\n\n// Example usage: Call debouncedSendKeystroke instead of socket.emit directly\ndocument.addEventListener('keydown', (event) => {\n    const data = { key: event.key, roomId: 'room1' }; // Example data structure\n    debouncedSendKeystroke(data);\n});\n"],"mappings":"AAAA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,OAAOC,MAAM,MAAM,aAAa;AAEhC,MAAMC,SAAS,GAAGD,MAAM,CAACC,SAAS;AAClC,OAAO,MAAMC,MAAM,GAAGH,EAAE,CAACE,SAAS,CAAC;AAEnC,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAMC,OAAO,GAAG;IACZ,sBAAsB,EAAE,IAAI;IAC5BC,mBAAmB,EAAE,UAAU;IAC/BC,OAAO,EAAE,KAAK;IACdC,SAAS,EAAE,CAAC,WAAW;EAC3B,CAAC;EACD,OAAOR,EAAE,CAACE,SAAS,EAAEG,OAAO,CAAC;AACjC,CAAC;;AAED;AACA,MAAMI,QAAQ,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EAC7B,IAAIJ,OAAO;EACX,OAAO,CAAC,GAAGK,IAAI,KAAK;IAChBC,YAAY,CAACN,OAAO,CAAC;IACrBA,OAAO,GAAGO,UAAU,CAAC,MAAMJ,IAAI,CAACK,KAAK,CAAC,IAAI,EAAEH,IAAI,CAAC,EAAED,IAAI,CAAC;EAC5D,CAAC;AACL,CAAC;;AAED;AACA,MAAMK,aAAa,GAAIC,IAAI,IAAK;EAC5Bd,MAAM,CAACe,IAAI,CAAC,MAAM,EAAED,IAAI,CAAC;AAC7B,CAAC;;AAED;AACA,MAAME,sBAAsB,GAAGV,QAAQ,CAACO,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;;AAE/D;AACAI,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAGC,KAAK,IAAK;EAC5C,MAAML,IAAI,GAAG;IAAEM,GAAG,EAAED,KAAK,CAACC,GAAG;IAAEC,MAAM,EAAE;EAAQ,CAAC,CAAC,CAAC;EAClDL,sBAAsB,CAACF,IAAI,CAAC;AAChC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}